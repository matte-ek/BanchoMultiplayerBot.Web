@using BanchoMultiplayerBot.Web.Services
@using MudBlazor.Utilities
@inherits LayoutComponentBase
@inject AuthService Auth
@inject LobbyService LobbyService
@inject EventsService EventsService

<MudThemeProvider IsDarkMode="true" Theme="_customTheme"/>
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    @if (!Auth.State.IsAuthenticated)
    {
        <div style="width: 50%;margin: 20em auto auto;">
            @if (_isLoadingEssentials)
            {
                <MudText>Please wait...</MudText>
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-2" />
            }
            else
            {
                <MudText>Please login to continue.</MudText>
                <MudButton Variant="Variant.Text" OnClick="Login" Class="mt-4" Style="color: #ff66aa;border: 1px solid #ff66aa;width: 15em;">Login with osu!</MudButton>
            }
        </div>  
    }
    else
    {
        <MudAppBar Elevation="0">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        </MudAppBar>
        <MudDrawer @bind-Open="@_drawerOpen">
            <NavMenu/>
        </MudDrawer>
        <MudMainContent>
            @Body
        </MudMainContent>   
    }
</MudLayout>

@code {
    bool _drawerOpen = true;
    bool _isLoadingEssentials = true;

    readonly MudTheme _customTheme = new()
    {
        PaletteDark = new PaletteDark
        {
            Surface = new MudColor(31, 31, 37, 255),
            Background = new MudColor(23, 23, 29, 255),
            DrawerBackground = new MudColor(28, 28, 35, 255),
            AppbarBackground = new MudColor(28, 28, 35, 255)
        },
        Typography = new Typography()
        {
            Body1 = new Body1Typography()
            {
                FontSize =  "14px"
            },
            Body2 = new Body2Typography()
            {
                FontSize = "13px"
            }
        }
    };

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void Login()
    {
        Auth.Authenticate();
    }

    protected override async Task OnInitializedAsync()
    {
        await Auth.Validate();

        if (Auth.State.IsAuthenticated)
        {
            await LobbyService.GetLobbies();
            await EventsService.Connect();
        }
        
        _isLoadingEssentials = false;
        
        await base.OnInitializedAsync();
    }
}